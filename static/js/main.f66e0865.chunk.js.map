{"version":3,"sources":["services/triviaApi.js","actions/playerAction.js","actions/index.js","pages/Login.js","services/gameFunctions.js","components/BtnNext.js","components/Header.js","components/Loading.js","pages/Game.js","actions/gameAction.js","actions/configAction.js","pages/Config.js","pages/Feedback.js","pages/Ranking.js","App.js","reducers/player.js","reducers/game.js","reducers/config.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["requestQuestions","token","c","d","ty","fetch","then","res","json","results","forEach","result","question","he","decode","correct_answer","incorrect_answers","map","option","localStorage","setItem","JSON","stringify","fetchToken","dispatch","type","payload","isFetching","requestTokenAPISuccess","catch","error","Login","props","state","email","playerName","handleChange","bind","renderButtons","target","value","id","this","setState","emailValid","length","requestToken","savePlayerImg","savePlayerName","savePlayerEmail","to","className","data-testid","disabled","onClick","htmlFor","placeholder","onChange","Component","connect","gravatarEmail","md5","toString","saveImg","name","saveName","chosenAnswer","document","querySelectorAll","button","dataset","answer","style","setLocalStorage","item","obj","BtnNext","nextQuestion","Header","score","src","alt","player","questions","game","Loading","Game","assertions","currentQuestion","options","timer","points","stopTimer","joinAnswers","startTimer","correctAnswerSumPoints","prevProps","category","difficulty","sort","Math","random","savePlayerAssertions","endGame","ranking","parse","getItem","removeItem","pointsDifficulty","savePlayerScore","totalPoints","totalAssertions","timerRun","setTimeout","clearTimeout","index","key","data-answer","indexOf","renderOptions","renderMain","config","requestQuestionsAPISuccess","fetchQuestions","saveScore","saveAssertions","fetchCategories","trivia_categories","categories","requestCategoriesAPISuccess","Config","requestCategories","updateCategory","hidden","aria-label","a","b","updateDifficulty","updateType","renderCategoryOptions","renderDifficultyOptions","renderTypeOptions","changeCategory","changeDifficulty","changeType","Feedback","showMessage","Ranking","App","path","component","exact","initialState","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f66e0865.chunk.js","sourcesContent":["import md5 from 'crypto-js/md5';\nimport he from 'he';\n\nconst TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\nconst CATEGORIES_URL = 'https://opentdb.com/api_category.php';\nconst GRAVATA_URL = 'https://www.gravatar.com/avatar/';\nconst QUESTIONS_URL = 'https://opentdb.com/api.php?amount=5';\n\nexport const requestCategories = () => fetch(CATEGORIES_URL)\n  .then((res) => res.json())\n  .then((res) => res.trivia_categories);\n\nexport const requestToken = () => fetch(TOKEN_URL)\n  .then((res) => res.json())\n  .then((res) => {\n    const { token } = res;\n    localStorage.setItem('token', token);\n    return token;\n  });\n\nexport const requestGravatarImage = (email) => {\n  const crypto = md5(email).toString();\n  return fetch(`${GRAVATA_URL}${crypto}`);\n};\n\nconst decodeOptions = (options) => options.map((option) => he.decode(option));\n\n// https://opentdb.com/api.php?amount=10&category=9&difficulty=medium&type=multiple\nexport const requestQuestions = (token, c, d, ty) => fetch(\n  `${QUESTIONS_URL}&category=${c}&difficulty=${d}&type=${ty}&token=${token}`,\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const { results } = res;\n    results.forEach((result) => {\n      result.question = he.decode(result.question);\n      result.correct_answer = he.decode(result.correct_answer);\n      result.incorrect_answers = decodeOptions(result.incorrect_answers);\n    });\n\n    localStorage.setItem('questions', JSON.stringify(results));\n    return results;\n  });\n\n//\n// ${hash-gerada}\n","import md5 from 'crypto-js/md5';\nimport { requestToken } from '../services/triviaApi';\n\nimport {\n  SAVE_EMAIL,\n  SAVE_NAME,\n  SAVE_IMG,\n  REQUEST_TOKEN,\n  REQUEST_TOKEN_SUCCESS,\n  REQUEST_TOKEN_ERROR,\n  SAVE_SCORE,\n  SAVE_ASSERTIONS,\n} from './index';\n\nexport const saveEmail = (email) => ({\n  type: SAVE_EMAIL,\n  payload: { email },\n});\n\nexport const saveName = (name) => ({\n  type: SAVE_NAME,\n  payload: { name },\n});\n\nexport const saveImg = (email) => ({\n  type: SAVE_IMG,\n  payload: { gravatarEmail: md5(email).toString() },\n});\n\nexport const saveScore = (score) => ({\n  type: SAVE_SCORE,\n  payload: { score },\n});\n\nexport const saveAssertions = (assertions) => ({\n  type: SAVE_ASSERTIONS,\n  payload: { assertions },\n});\n\nexport const requestTokenAPI = () => ({\n  type: REQUEST_TOKEN,\n  payload: {\n    isFetching: true,\n  },\n});\n\nexport const requestTokenAPISuccess = (token) => ({\n  type: REQUEST_TOKEN_SUCCESS,\n  payload: {\n    token,\n    isFetching: false,\n  },\n});\n\nexport const requestTokenAPIError = (error) => ({\n  type: REQUEST_TOKEN_ERROR,\n  payload: {\n    error,\n    isFetching: false,\n  },\n});\n\nexport const fetchToken = () => (dispatch) => {\n  dispatch(requestTokenAPI());\n  requestToken()\n    .then((token) => dispatch(requestTokenAPISuccess(token)))\n    .catch(() => dispatch(requestTokenAPIError('Não foi possível recuperar')));\n};\n","export const SAVE_EMAIL = 'SAVE_EMAIL';\nexport const SAVE_NAME = 'SAVE_NAME';\nexport const SAVE_IMG = 'SAVE_IMG';\nexport const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const REQUEST_TOKEN_SUCCESS = 'REQUEST_TOKEN_SUCCESS';\nexport const REQUEST_TOKEN_ERROR = 'REQUEST_TOKEN_ERROR';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const REQUEST_QUESTIONS_SUCCESS = 'REQUEST_QUESTIONS_SUCCESS';\nexport const REQUEST_QUESTIONS_ERROR = 'REQUEST_QUESTIONS_ERROR';\nexport const SAVE_SCORE = 'SAVE_SCORE';\nexport const SAVE_ASSERTIONS = 'SAVE_ASSERTIONS';\nexport const SAVE_CURRENT_INDEX = 'SAVE_CURRENT_INDEX';\n\nexport const REQUEST_CATEGORIES = 'REQUEST_CATEGORIES';\nexport const REQUEST_CATEGORIES_SUCCESS = 'REQUEST_CATEGORIES_SUCCESS';\nexport const REQUEST_CATEGORIES_ERROR = 'REQUEST_CATEGORIES_ERROR';\n\nexport const CHANGE_CATEGORY = 'CHANGE_CATEGORY';\nexport const CHANGE_DIFFICULTY = 'CHANGE_DIFFICULTY';\nexport const CHANGE_TYPE = 'CHANGE_TYPE';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  fetchToken,\n  saveName,\n  saveEmail,\n  saveImg,\n} from '../actions/playerAction';\n\nimport '../styles/Login.css';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      playerName: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.renderButtons = this.renderButtons.bind(this);\n  }\n\n  handleChange({ target: { value, id } }) {\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  renderButtons() {\n    const { email, playerName } = this.state;\n    const emailValid = email.length <= 0 || playerName.length <= 0;\n    const { requestToken, savePlayerImg, savePlayerName, savePlayerEmail } = this.props;\n    return (\n      <>\n        <Link to=\"/game\">\n          <button\n            className=\"login-btn play-btn\"\n            data-testid=\"btn-play\"\n            type=\"submit\"\n            disabled={ emailValid }\n            onClick={ () => {\n              requestToken();\n              savePlayerName(playerName);\n              savePlayerEmail(email);\n              savePlayerImg(email);\n            } }\n          >\n            Play\n          </button>\n        </Link>\n        <Link to=\"/config\">\n          <button\n            className=\"login-btn config-btn\"\n            type=\"button\"\n            data-testid=\"btn-settings\"\n          >\n            Settings\n          </button>\n        </Link>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"login-page\">\n        <h1 className=\"login-title\">T R I V I A</h1>\n        <div className=\"login-container\">\n          <label className=\"login-label\" htmlFor=\"email\">\n            <input\n              // autoComplete=\"off\"\n              className=\"login-input\"\n              data-testid=\"input-gravatar-email\"\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label className=\"login-label\" htmlFor=\"playerName\">\n            <input\n              // autoComplete=\"off\"\n              className=\"login-input\"\n              data-testid=\"input-player-name\"\n              id=\"playerName\"\n              type=\"text\"\n              placeholder=\"Player name\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          {this.renderButtons()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestToken: () => dispatch(fetchToken()),\n  savePlayerImg: (email) => dispatch(saveImg(email)),\n  savePlayerName: (name) => dispatch(saveName(name)),\n  savePlayerEmail: (name) => dispatch(saveEmail(name)),\n});\n\nLogin.propTypes = {\n  requestToken: PropTypes.func.isRequired,\n  savePlayerName: PropTypes.func.isRequired,\n  savePlayerEmail: PropTypes.func.isRequired,\n  savePlayerImg: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","export function chosenAnswer() {\n  const buttons = document.querySelectorAll('[type=button]');\n  buttons.forEach((button) => {\n    if (button.dataset.answer === 'correct') {\n      button.style = 'background-color: #06f00f;color:#fcfcfc;';\n    }\n    if (button.dataset.answer === 'incorrect') {\n      button.style = 'background-color: red;color:#fcfcfc;';\n    }\n  });\n}\n\nexport function setLocalStorage(item, obj) {\n  localStorage.setItem(item, JSON.stringify(obj));\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/BtnNext.css';\n\nexport default class BtnNext extends Component {\n  render() {\n    const { nextQuestion } = this.props;\n    return (\n      <button\n        className=\"next-btn\"\n        type=\"button\"\n        data-testid=\"btn-next\"\n        onClick={ nextQuestion }\n      >\n        NEXT\n      </button>\n    );\n  }\n}\n\nBtnNext.propTypes = {\n  nextQuestion: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/Header.css';\n\nclass Header extends Component {\n  render() {\n    const { name, gravatarEmail, score } = this.props;\n    // const { points, timer, stopTimer, endGame, currentQuestion } = this.state;\n    return (\n      <header className=\"header-component\">\n        <div className=\"header-container\">\n          <div className=\"header-profile\">\n            <img\n              className=\"header-profile-img\"\n              src={ `https://www.gravatar.com/avatar/${gravatarEmail}` }\n              alt=\"\"\n              data-testid=\"header-profile-picture\"\n            />\n            <p data-testid=\"header-player-name\">{name}</p>\n          </div>\n          <p data-testid=\"header-score\">{`Score : ${score}`}</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  gravatarEmail: state.player.gravatarEmail,\n  questions: state.game.questions,\n  score: state.player.score,\n  // token: state.player.token,\n  // assertions: state.player.assertions,\n});\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport '../styles/Loading.css';\n\nconst Loading = () => (\n  <div className=\"loadingio-spinner-spin-dwqg6qi276g\">\n    <div className=\"ldio-9nrzi3ks0oa\">\n      <div>\n        <div />\n      </div>\n      <div>\n        <div />\n      </div>\n      <div>\n        <div />\n      </div>\n      <div>\n        <div />\n      </div>\n      <div>\n        <div />\n      </div>\n      <div>\n        <div />\n      </div>\n      <div>\n        <div />\n      </div>\n      <div>\n        <div />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { fetchQuestions } from '../actions/gameAction';\nimport { saveScore, saveAssertions } from '../actions/playerAction';\nimport { chosenAnswer, setLocalStorage } from '../services/gameFunctions';\nimport '../App.css';\nimport BtnNext from '../components/BtnNext';\nimport Header from '../components/Header';\nimport '../styles/Game.css';\nimport Loading from '../components/Loading';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assertions: 0,\n      currentQuestion: 0,\n      options: [],\n      timer: 30,\n      points: 0,\n      stopTimer: false,\n    };\n    this.joinAnswers = this.joinAnswers.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.correctAnswerSumPoints = this.correctAnswerSumPoints.bind(this);\n  }\n\n  componentDidMount() {\n    const { name } = this.props;\n    setLocalStorage('state', {\n      player: { name, assertions: 0, score: 0, gravatarEmail: 'gravatarEmail' },\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { questions, requestQuestions, token, category, difficulty, type } = this.props;\n    if (questions !== prevProps.questions) this.joinAnswers();\n    if (token !== prevProps.token) requestQuestions(token, category, difficulty, type);\n  }\n\n  joinAnswers() {\n    const { questions } = this.props;\n    const { currentQuestion } = this.state;\n    const roundingNumber = 0.5;\n    this.setState({\n      options: [\n        questions[currentQuestion].correct_answer,\n        ...questions[currentQuestion].incorrect_answers,\n      ].sort(() => Math.random() - roundingNumber),\n    });\n  }\n\n  nextQuestion() {\n    const { currentQuestion, points, assertions } = this.state;\n    const { questions, savePlayerAssertions, name, gravatarEmail } = this.props;\n    if (currentQuestion === questions.length - 1) {\n      savePlayerAssertions(assertions);\n      this.setState({ endGame: true }, () => {\n        const ranking = JSON.parse(localStorage.getItem('ranking')) || [];\n        localStorage.removeItem('questions');\n        setLocalStorage('ranking', [...ranking, { name, score: points, gravatarEmail }]);\n      });\n    } else {\n      this.setState(\n        {\n          currentQuestion: currentQuestion + 1,\n          timer: 30,\n          stopTimer: false,\n          options: [],\n        }, () => this.joinAnswers(),\n      );\n    }\n  }\n\n  handleChange({ target: { value, id } }) {\n    this.setState({ [id]: value });\n  }\n\n  correctAnswerSumPoints() {\n    const { points, currentQuestion, timer, assertions } = this.state;\n    const { questions, name, gravatarEmail, savePlayerScore } = this.props;\n    const { difficulty } = questions[currentQuestion];\n    const levelHard = 3;\n    const basePoints = 10;\n    let pointsDifficulty;\n    switch (difficulty) {\n    case 'easy':\n      pointsDifficulty = 1;\n      break;\n    case 'medium':\n      pointsDifficulty = 2;\n      break;\n    case 'hard':\n      pointsDifficulty = levelHard;\n      break;\n    default:\n      break;\n    }\n    const totalPoints = points + (basePoints + timer * pointsDifficulty);\n    const totalAssertions = assertions + 1;\n    this.setState({ points: totalPoints, assertions: totalAssertions }, () => {\n      savePlayerScore(totalPoints);\n      setLocalStorage('state', {\n        player: {\n          name,\n          assertions: totalAssertions,\n          score: totalPoints,\n          gravatarEmail,\n        },\n      });\n    });\n  }\n\n  startTimer() {\n    const interval = 1000;\n    const { timer, stopTimer } = this.state;\n    const timerRun = setTimeout(() => {\n      this.setState({ timer: timer - 1 });\n    }, interval);\n    if (timer === 0 || stopTimer) {\n      clearTimeout(timerRun);\n      chosenAnswer();\n    }\n  }\n\n  renderOptions() {\n    const { currentQuestion, options, timer, stopTimer } = this.state;\n    const { questions } = this.props;\n    return options.map(\n      (option, index) => (option === questions[currentQuestion].correct_answer ? (\n        <button\n          className=\"question-option\"\n          type=\"button\"\n          key={ index }\n          data-testid=\"correct-answer\"\n          data-answer=\"correct\"\n          onClick={ () => {\n            chosenAnswer();\n            this.setState({ stopTimer: true });\n            this.correctAnswerSumPoints(this);\n          } }\n          disabled={ !timer || stopTimer }\n        >\n          {option}\n        </button>\n      ) : (\n        <button\n          className=\"question-option\"\n          type=\"button\"\n          key={ index }\n          data-testid={ `wrong-answer-${questions[\n            currentQuestion\n          ].incorrect_answers.indexOf(option)}` }\n          onClick={ () => {\n            chosenAnswer();\n            this.setState({ stopTimer: true });\n          } }\n          data-answer=\"incorrect\"\n          disabled={ !timer || stopTimer }\n        >\n          {option}\n        </button>\n      )),\n    );\n  }\n\n  renderMain() {\n    const { currentQuestion, timer, stopTimer } = this.state;\n    const { questions } = this.props;\n    return (\n      <main className=\"main-component\">\n        <p className=\"main-timer\">{`T i m e r: ${timer}`}</p>\n\n        {questions.length ? (\n          <div className=\"main-container\">\n            {this.startTimer()}\n            <div className=\"question-component\">\n              <div className=\"question-container\">\n                <p\n                  className=\"question-category\"\n                  data-testid=\"question-category\"\n                >\n                  {questions[currentQuestion].category}\n                </p>\n                <p className=\"question-text\" data-testid=\"question-text\">\n                  {questions[currentQuestion].question}\n                </p>\n              </div>\n              <div className=\"question-options\">{this.renderOptions()}</div>\n            </div>\n          </div>\n        ) : <Loading />}\n        {(!timer || stopTimer) && <BtnNext nextQuestion={ this.nextQuestion } />}\n      </main>\n    );\n  }\n\n  render() {\n    const { endGame } = this.state;\n    return (\n      <>\n        {endGame && <Redirect to=\"/feedback\" />}\n        <Header />\n        {this.renderMain()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player, game, config }) => ({\n  name: player.name,\n  gravatarEmail: player.gravatarEmail,\n  token: player.token,\n  assertions: player.assertions,\n  questions: game.questions,\n  category: config.category,\n  difficulty: config.difficulty,\n  type: config.type,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (\n    token,\n    category,\n    difficulty,\n    type,\n  ) => dispatch(fetchQuestions(token, category, difficulty, type)),\n  savePlayerScore: (score) => dispatch(saveScore(score)),\n  savePlayerAssertions: (assertions) => dispatch(saveAssertions(assertions)),\n});\n\nGame.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  savePlayerScore: PropTypes.func.isRequired,\n  savePlayerAssertions: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import { requestQuestions } from '../services/triviaApi';\n\nimport {\n  REQUEST_QUESTIONS,\n  REQUEST_QUESTIONS_SUCCESS,\n  REQUEST_QUESTIONS_ERROR,\n  SAVE_CURRENT_INDEX,\n} from './index';\n\nexport const saveCurrentIndex = (index) => ({\n  type: SAVE_CURRENT_INDEX,\n  payload: { index },\n});\n\nexport const requestQuestionsAPI = () => ({\n  type: REQUEST_QUESTIONS,\n  payload: {\n    isFetching: true,\n  },\n});\n\nexport const requestQuestionsAPISuccess = (questions) => ({\n  type: REQUEST_QUESTIONS_SUCCESS,\n  payload: {\n    questions,\n    isFetching: false,\n  },\n});\n\nexport const requestQuestionsAPIError = (error) => ({\n  type: REQUEST_QUESTIONS_ERROR,\n  payload: {\n    error,\n    isFetching: false,\n  },\n});\n\nexport const fetchQuestions = (token, category, difficulty, type) => (dispatch) => {\n  dispatch(requestQuestionsAPI());\n  requestQuestions(token, category, difficulty, type)\n    .then((questions) => dispatch(requestQuestionsAPISuccess(questions)))\n    .catch(() => dispatch(requestQuestionsAPIError('Não foi possível recuperar')));\n};\n","import { requestCategories } from '../services/triviaApi';\n\nimport {\n  REQUEST_CATEGORIES,\n  REQUEST_CATEGORIES_SUCCESS,\n  REQUEST_CATEGORIES_ERROR,\n  CHANGE_CATEGORY,\n  CHANGE_DIFFICULTY,\n  CHANGE_TYPE,\n} from './index';\n\nexport const requestCategoriesAPI = () => ({\n  type: REQUEST_CATEGORIES,\n  payload: {\n    isFetching: true,\n  },\n});\n\nexport const requestCategoriesAPISuccess = (categories) => ({\n  type: REQUEST_CATEGORIES_SUCCESS,\n  payload: {\n    categories,\n    isFetching: false,\n  },\n});\n\nexport const requestCategoriesAPIError = (error) => ({\n  type: REQUEST_CATEGORIES_ERROR,\n  payload: {\n    error,\n    isFetching: false,\n  },\n});\n\nexport const changeCategory = (category) => ({\n  type: CHANGE_CATEGORY,\n  payload: {\n    category,\n  },\n});\n\nexport const changeDifficulty = (difficulty) => ({\n  type: CHANGE_DIFFICULTY,\n  payload: {\n    difficulty,\n  },\n});\n\nexport const changeType = (type) => ({\n  type: CHANGE_TYPE,\n  payload: {\n    type,\n  },\n});\n\nexport const fetchCategories = () => (dispatch) => {\n  dispatch(requestCategoriesAPI());\n  requestCategories()\n    .then((categories) => dispatch(requestCategoriesAPISuccess(categories)))\n    .catch(() => dispatch(requestCategoriesAPIError('Não foi possível recuperar')));\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  changeCategory,\n  changeDifficulty,\n  changeType,\n  fetchCategories,\n} from '../actions/configAction';\nimport '../styles/Config.css';\nimport Loading from '../components/Loading';\n\nconst falseSortReturn = -1;\nclass Config extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const { requestCategories } = this.props;\n    requestCategories();\n  }\n\n  renderCategoryOptions() {\n    const { categories, updateCategory } = this.props;\n    return (\n      <label htmlFor=\"categories\" className=\"config-label\">\n        <select\n          name=\"categories\"\n          id=\"category\"\n          className=\"config-select\"\n          onChange={ ({ target: { value } }) => updateCategory(value) }\n        >\n          <option hidden aria-label=\"default\">\n            Category\n          </option>\n          {categories\n            .sort((a, b) => (a.name > b.name ? 1 : falseSortReturn))\n            .map(({ id, name }) => (\n              <option key={ id } value={ id } className=\"config-option\">\n                {name}\n              </option>\n            ))}\n        </select>\n      </label>\n    );\n  }\n\n  renderDifficultyOptions() {\n    const { updateDifficulty } = this.props;\n    return (\n      <label htmlFor=\"categories\" className=\"config-label\">\n        <select\n          name=\"difficulties\"\n          id=\"difficulty\"\n          className=\"config-select\"\n          onChange={ ({ target: { value } }) => updateDifficulty(value) }\n        >\n          <option hidden aria-label=\"default\">\n            Difficulty\n          </option>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderTypeOptions() {\n    const { updateType } = this.props;\n    return (\n      <label htmlFor=\"categories\" className=\"config-label\">\n        <select\n          name=\"types\"\n          id=\"type\"\n          className=\"config-select\"\n          onChange={ ({ target: { value } }) => updateType(value) }\n        >\n          <option hidden aria-label=\"default\">\n            Type\n          </option>\n          <option value=\"boolean\">True or False</option>\n          <option value=\"multiple\">Multiple choice</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    const { isFetching } = this.props;\n    return (\n      <div className=\"config-page\">\n        <h1 className=\"config-title\" data-testid=\"settings-title\">\n          S e t t i n g s\n        </h1>\n        {isFetching ? (\n          <Loading />\n        ) : (\n          <div className=\"config-container\">\n            {this.renderCategoryOptions()}\n            {this.renderDifficultyOptions()}\n            {this.renderTypeOptions()}\n            <Link to=\"/\" className=\"save-btn\">SAVE</Link>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ config }) => ({\n  categories: config.categories,\n  isFetching: config.isFetching,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestCategories: () => dispatch(fetchCategories()),\n  updateCategory: (category) => dispatch(changeCategory(category)),\n  updateDifficulty: (difficulty) => dispatch(changeDifficulty(difficulty)),\n  updateType: (type) => dispatch(changeType(type)),\n});\n\nConfig.propTypes = {\n  categories: PropTypes.arrayOf(PropTypes.object),\n  requestCategories: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Config);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport '../styles/Feedback.css';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  showMessage() {\n    const { assertions } = this.props;\n    const minAssertion = 3;\n\n    if (assertions < minAssertion) {\n      return 'Could be better...';\n    }\n    if (assertions >= minAssertion) {\n      return 'Good job!';\n    }\n  }\n\n  render() {\n    const { score, assertions } = this.props;\n    return (\n      <>\n        <Header />\n        <main className=\"feedback-component\">\n          <div className=\"feedback-container\">\n            <p\n              className=\"feedback-text\"\n              data-testid=\"feedback-text\"\n            >\n              {this.showMessage(assertions)}\n\n            </p>\n            <p\n              className=\"feedback-total-question\"\n              data-testid=\"feedback-total-question\"\n            >\n              {`You guessed ${assertions} questions`}\n\n            </p>\n            <p\n              className=\"feedback-total-score\"\n              data-testid=\"feedback-total-score\"\n            >\n              {`Score: ${score}`}\n\n            </p>\n            <div className=\"feedback-buttons\">\n              <Link\n                to=\"/\"\n                className=\"feedback-btn btn-play-again\"\n                data-testid=\"btn-play-again\"\n              >\n                PLAY AGAIN\n              </Link>\n              <Link\n                to=\"/ranking\"\n                className=\"feedback-btn btn-ranking\"\n                data-testid=\"btn-ranking\"\n              >\n                SEE RANK\n              </Link>\n            </div>\n          </div>\n        </main>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  gravatarEmail: state.player.gravatarEmail,\n  assertions: state.player.assertions,\n  questions: state.game.questions,\n  score: state.player.score,\n});\n\nconst mapDispatchToProps = () => ({});\n\nFeedback.propTypes = {\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport '../styles/Ranking.css';\n\nclass Ranking extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({ target: { value, id } }) {\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    return (\n      <div className=\"ranking-page\">\n        <div className=\"ranking-container\">\n          <h1 className=\"ranking-title\" data-testid=\"ranking-title\">\n            R a n k i n g\n          </h1>\n          <section className=\"ranking-table\">\n            {ranking && ranking.sort((a, b) => {\n              const minusOne = -1;\n              if (a.score < b.score) return 1;\n              if (a.score > b.score) return minusOne;\n              return 0;\n            }).map((player, index) => (\n              <div className=\"ranking-line\" key={ index }>\n                <img className=\"ranking-img\" src={ `https://www.gravatar.com/avatar/${player.gravatarEmail}` } alt=\"\" />\n\n                <p className=\"ranking-name\" data-testid={ `player-name-${index}` }>\n                  { player.name }\n                </p>\n                <p className=\"ranking-score\" data-testid={ `player-score-${index}` }>\n                  {`${player.score} points`}\n                </p>\n              </div>\n            ))}\n          </section>\n\n          <Link to=\"/\" className=\"btn-go-home\" data-testid=\"btn-go-home\">\n            HOME\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = () => ({\n\n});\n\nconst mapDispatchToProps = () => ({\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Config from './pages/Config';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/config\" component={ Config } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","/* eslint-disable complexity */\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport {\n  SAVE_EMAIL,\n  SAVE_NAME,\n  SAVE_IMG,\n  REQUEST_TOKEN,\n  REQUEST_TOKEN_SUCCESS,\n  REQUEST_TOKEN_ERROR,\n  SAVE_SCORE,\n  SAVE_ASSERTIONS,\n} from '../actions/index';\n\nconst initialState = {\n  email: '',\n  name: '',\n  gravatarEmail: '',\n  score: 0,\n  assertions: 0,\n  token: '',\n  isFetching: false,\n};\n\nfunction player(state = initialState, action) {\n  switch (action.type) {\n  case SAVE_EMAIL:\n  case SAVE_NAME:\n  case SAVE_IMG:\n  case SAVE_SCORE:\n  case SAVE_ASSERTIONS:\n  case REQUEST_TOKEN:\n  case REQUEST_TOKEN_SUCCESS:\n  case REQUEST_TOKEN_ERROR:\n    return {\n      ...state,\n      ...action.payload,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default player;\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport {\n  REQUEST_QUESTIONS,\n  REQUEST_QUESTIONS_SUCCESS,\n  REQUEST_QUESTIONS_ERROR,\n  SAVE_CURRENT_INDEX,\n} from '../actions/index';\n\nconst initialState = {\n  questions: [],\n  isFetching: false,\n};\n\nfunction game(state = initialState, action) {\n  switch (action.type) {\n  case REQUEST_QUESTIONS:\n  case REQUEST_QUESTIONS_SUCCESS:\n  case REQUEST_QUESTIONS_ERROR:\n  case SAVE_CURRENT_INDEX:\n    return {\n      ...state,\n      ...action.payload,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default game;\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport {\n  REQUEST_CATEGORIES,\n  REQUEST_CATEGORIES_SUCCESS,\n  REQUEST_CATEGORIES_ERROR,\n  CHANGE_CATEGORY,\n  CHANGE_DIFFICULTY,\n  CHANGE_TYPE,\n} from '../actions/index';\n\nconst initialState = {\n  categories: [],\n  difficulty: '',\n  category: '',\n  type: '',\n  isFetching: false,\n\n};\n\nfunction config(state = initialState, { type, payload }) {\n  switch (type) {\n  case REQUEST_CATEGORIES:\n  case REQUEST_CATEGORIES_SUCCESS:\n  case REQUEST_CATEGORIES_ERROR:\n  case CHANGE_CATEGORY:\n  case CHANGE_DIFFICULTY:\n  case CHANGE_TYPE:\n    return {\n      ...state,\n      ...payload,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default config;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport game from './game';\nimport config from './config';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  player,\n  game,\n  config,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"App\">\n    <Provider store={ store }>\n      <Router basename={ process.env.PUBLIC_URL }>\n        <App />\n      </Router>\n    </Provider>\n  </div>,\n\n  document.getElementById('root'),\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}